/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, CaseModel as PrismaCaseModel } from "@prisma/client";

export class CaseModelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CaseModelCountArgs, "select">
  ): Promise<number> {
    return this.prisma.caseModel.count(args);
  }

  async caseModels(
    args: Prisma.CaseModelFindManyArgs
  ): Promise<PrismaCaseModel[]> {
    return this.prisma.caseModel.findMany(args);
  }
  async caseModel(
    args: Prisma.CaseModelFindUniqueArgs
  ): Promise<PrismaCaseModel | null> {
    return this.prisma.caseModel.findUnique(args);
  }
  async createCaseModel(
    args: Prisma.CaseModelCreateArgs
  ): Promise<PrismaCaseModel> {
    return this.prisma.caseModel.create(args);
  }
  async updateCaseModel(
    args: Prisma.CaseModelUpdateArgs
  ): Promise<PrismaCaseModel> {
    return this.prisma.caseModel.update(args);
  }
  async deleteCaseModel(
    args: Prisma.CaseModelDeleteArgs
  ): Promise<PrismaCaseModel> {
    return this.prisma.caseModel.delete(args);
  }
}
